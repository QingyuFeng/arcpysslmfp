; Script generated by the Inno Setup Script Wizard.
; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!
; Ref: http://stackoverflow.com/questions/4833831/inno-setup-32bit-and-64bit-in-one

; ****  REQUIREMENTS FOR COMPILING THIS INSTALLER SCRIPT  ****
; The following files must exist in the directory defined by the SourceDir paramter under the [Setup] section below:
; gdal-204-1911-x64-core.msi  (C++ GDAL for x64)
; MSMpiSetup.exe  (Microsoft MPI v7.1)
; VC_redist.x64.exe  (Micosoft C++ 2015 x64 redistributable); 
; TauDEM 64-bit executables must exist under the following directory (this directory should exists under the dir defined by SourceDir parameter): 
; TauDEMExe53964bit/
; TauDEM ArcGIG python toolbox related python files and the one .tbx file must exist under the following directory (this directory should exists under the dir defined by SourceDir parameter):
; ArcpySSLMFP.pyt/
; exampledata/

; *** SOURCE CONTROL REQUIREMENTS ****
; All the files (as listed below) under the WindowsInstaller folder are included in source control
; This script file (setup.ino).
; taudem.bmp - Any time this file is updated it should be copied to the dir specified by the SoureDir param in the [Setup] section of this script


#define MyAppName "ArcpySSLMFP"
#define MyAppVersion "1.0"
#define MyAppPublisher "RCEES"
#define MyAppURL "http://159.226.240.209/rceessslm.html"

[Setup]
; NOTE: The value of AppId uniquely identifies this application.
; Do not use the same AppId value in installers for other applications.
; (To generate a new GUID, click Tools | Generate GUID inside the IDE.)
AppId={{41ADC8AF-9139-485A-9910-E5D69DDAA085}
AppName={#MyAppName}
AppVersion={#MyAppVersion}
;AppVerName={#MyAppName} {#MyAppVersion}
AppPublisher={#MyAppPublisher}
AppPublisherURL={#MyAppURL}
AppSupportURL={#MyAppURL}
AppUpdatesURL={#MyAppURL}
DefaultDirName={pf}\ArcpySSLMFP
DefaultGroupName={#MyAppName}
OutputBaseFilename=ArcpySSLMFP_setup
Compression=lzma
SolidCompression=yes        
; "ArchitecturesInstallIn64BitMode=x64" requests that the install be
; done in "64-bit mode" on x64, meaning it should use the native
; 64-bit Program Files directory and the 64-bit view of the registry.
; On all other architectures it will install in "32-bit mode".
ArchitecturesInstallIn64BitMode=x64
WizardSmallImageFile=sslm.bmp
; Don't show the welcome wizard page and ready to install page
DisableWelcomePage=yes
DisableReadyPage=yes
; The following source dir should have all the files and sub directories as outlined above (REQUIREMENTS FOR COMPILING THIS INSTALLER SCRIPT)
SourceDir=D:\gitrepos\arcpysslmfp\InstallationSource
OutputDir=D:\gitrepos\arcpysslmfp\WindowsInstaller
[Languages]
Name: "english"; MessagesFile: "compiler:Default.isl"

;[Dirs]
;Name: "C:\GDAL"

;[Messages]
;WelcomeLabel2=This will install [name/ver] on your computer.%nIt is recommended that you close all other applications and disable any anti virus before continuing. %n%nThe following programs will be installed:%nGDAL 111 (MSVC 2010)%nMicrosoft HPC Pack 2012 MS-MPI Redistributable Pack%nMicrosoft Visual C++ 2010 x86 Redistributable%n TauDEM version 5.3

[Files]
; copy files 
;Source: "GDAL-2.4.4.win-amd64-py3.7.msi"; DestDir: "{app}\setup_files"; Flags: ignoreversion
Source: "gdal-204-1911-x64-core.msi"; DestDir: "{app}\setup_files"; Flags: ignoreversion deleteafterinstall; Check: Is64BitInstallMode

;Source: "msmpisdk.msi"; DestDir: "{app}\setup_files"; Flags: ignoreversion deleteafterinstall
Source: "MSMpiSetup.exe"; DestDir: "{app}\setup_files"; Flags: ignoreversion deleteafterinstall

; since for 64bit installtion we need both x86 and x64 redestributables no need to check OS architecture for copying files
Source: "vc_redist.x64.exe"; DestDir: "{app}\setup_files"; Flags: ignoreversion deleteafterinstall

Source: "TauDEMExe53964bit\*"; DestDir: "{app}\TauDEMExe53964bit"; Flags:  ignoreversion recursesubdirs createallsubdirs; Check: Is64BitInstallMode

Source: "ArcpySSLMFP.pyt"; DestDir: "{app}"; Flags: ignoreversion recursesubdirs createallsubdirs 
Source: "exampledata\*"; DestDir: "{app}\exampledata"; Flags: ignoreversion recursesubdirs createallsubdirs
; NOTE: Don't use "Flags: ignoreversion" on any shared system files

[Run]
; install GDAL core components
; TODO: Implement functions to check if GDAL needs to be installed (all got the registry keys for all these 3 installations)
Filename: "{app}\setup_files\gdal-204-1911-x64-core.msi"; Flags: waituntilterminated shellexec; Check: NeedsToInstallGDAL_C(True) 
Filename: "{app}\setup_files\vc_redist.x64.exe"; Flags: waituntilterminated; Check: NeedsToInstallRedist(True)
Filename: "{app}\setup_files\MSMpiSetup.exe"; Flags: waituntilterminated shellexec; Check: NeedsToInstallMPI()


[Registry]
; set PATH
; set GDAL components path
;Root: HKLM; Subkey: "SYSTEM\CurrentControlSet\Control\Session Manager\Environment"; ValueType:string; ValueName:"PATH"; ValueData:"{olddata};C:\GDAL"; Check: NeedsAddPath('C:\GDAL', True, False); Flags: preservestringtype
;set GDAL program path
Root: HKLM; Subkey: "SYSTEM\CurrentControlSet\Control\Session Manager\Environment"; ValueType:string; ValueName:"PATH"; ValueData:"{olddata};{pf}\GDAL"; Check: NeedsAddPath('{pf}\GDAL', True, True); Flags: preservestringtype
Root: HKLM; Subkey: "SYSTEM\CurrentControlSet\Control\Session Manager\Environment"; ValueType:string; ValueName:"PATH"; ValueData:"{olddata};{pf}\GDAL"; Check: NeedsAddPath('{pf}\GDAL', False, True); Flags: preservestringtype

; set TauDEM path
Root: HKLM; Subkey: "SYSTEM\CurrentControlSet\Control\Session Manager\Environment"; ValueType:string; ValueName:"PATH"; ValueData:"{olddata};{app}\TauDEMExe53964bit"; Check: NeedsAddPath('{app}\TauDEMExe53964bit', False, True); Flags: preservestringtype
Root: HKLM; Subkey: "SYSTEM\CurrentControlSet\Control\Session Manager\Environment"; ValueType:string; ValueName:"PATH"; ValueData:"{olddata};{app}\TauDEMExe53964bit"; Check: NeedsAddPath('{app}\TauDEMExe53964bit', True, True); Flags: preservestringtype


[code]
// add a custome wizard page after the welcome page to show the list of programs that will be installed
procedure InitializeWizard();
var UserPage: TInputQueryWizardPage;
var notes_string: string;

begin
  notes_string := 'NOTES:'#13'1. The redistributables listed above will only be installed if they are not already installed.'#13 +
      '2. You will need to accept the license agreements associated with this software and click through several screens.'#13 +
      '3. When prompted to Choose Setup Type for GDAL, choose "Typical".'#13 +
      '4. The installer will also add firewall exceptions to allow TauDEM programs to run. These allow MPI interprocess communication used in the parallel computations.  This is communication within your computer and not over any external network.'#13 +
      '5. The installer will also add the following path entries:' +
      'C:\Program Files\Microsoft MPI\Bin\;C:\Program Files\GDAL;C:\Program Files\TauDEM\TauDEMExe53964bit'; 
  begin
    UserPage := CreateInputQueryPage(wpWelcome,
      'The following programs will be installed', '',
      'ArcpySSLMFP.pyt, TauDEM version 5.3.9, GDAL 204 (MSVC 2013) for 64 bit Windows PC, ' +
      'Microsoft Visual C++ 2015 Redistributable Package (x64), Microsoft MPI'#13#13 +  notes_string);   
  end
end;

// Check if we need to install C++ Redistributable
// If either a 64 or 32 bit version of C++ redistributable is already installed, then this function returns False, otherwise True
function NeedsToInstallRedist(IsInstallAppX64: boolean): boolean;
begin
    if Is64BitInstallMode and IsInstallAppX64 then
    begin    
       if RegKeyExists(HKEY_LOCAL_MACHINE, 'SOFTWARE\WOW6432Node\Microsoft\VisualStudio\14.0\VC\Runtimes\x64') then
          begin
            Result := False;
            exit;
          end
       else
          begin
            Result := True;
            exit;
          end;
    end
    else 
      begin
        Result := False;
        exit;
      end;      
end;

// Check if we need to install MPI
// If MPI is already installed, then this function returns False, otherwise True
function NeedsToInstallMPI(): boolean;
begin    
   if RegKeyExists(HKEY_LOCAL_MACHINE, 'SOFTWARE\WOW6432Node\Microsoft\MPI') then
      begin
        Result := False;
        exit;
      end
   else
      begin
        Result := True;
        exit;
      end;      
end;


function NeedsToInstallGDAL_C(IsInstallAppX64: boolean): boolean;
// checks if we need to install GDAL C++ library
begin
    if Is64BitInstallMode and IsInstallAppX64 then
    begin    
       if RegKeyExists(HKEY_LOCAL_MACHINE, 'SOFTWARE\Classes\Installer\Products\7E174159D1F9EFC4AA53953383A125AA') then
          begin
            Result := False;
            exit;
          end
       else
          begin
            Result := True;
            exit;
          end;
    end
    else 
      begin
        Result := False;
        exit;
      end;      
end;

function NeedsAddPath(NewPath: string; Win64: boolean; CheckOSArchitecture: boolean): boolean;
var
  OrigPath: string;
begin
  if CheckOSArchitecture then
  begin 
    if IsWin64 and Win64 then
    begin
      Result := False;
      exit;
    end;
  end;
  //MsgBox('Checking path variable', mbInformation, MB_OK);
  //MsgBox('NewPath:' + ExpandConstant(NewPath), mbInformation, MB_OK);
  // this will read the current path value and store in the variable OrigPath
  if not RegQueryStringValue(HKEY_LOCAL_MACHINE,
    'SYSTEM\CurrentControlSet\Control\Session Manager\Environment',
    'Path', OrigPath) then
  begin
    // Path variable is missing
    //MsgBox('Path variable not found.', mbInformation, MB_OK);
    Result := True;
    exit;
  end;
  // look for the path with leading and trailing semicolon
  // Pos() returns 0 if not found
  //MsgBox('OrigPath:' + OrigPath, mbInformation, MB_OK);
  Result := Pos(';' + UpperCase(ExpandConstant(NewPath)) + ';', ';' + UpperCase(OrigPath) + ';') = 0;
  //if Result then
  //  MsgBox('Result of path matching:match not found', mbInformation, MB_OK)
  //else
  //  MsgBox('Result of path matching:match found', mbInformation, MB_OK)
end;


procedure CleanUp(FolderToDelete: string);
begin         
    if DirExists(ExpandConstant(FolderToDelete)) then
    begin
        DelTree(ExpandConstant(FolderToDelete), True, True, True);
        //MsgBox('Folder deleted', mbInformation, MB_OK);
    end;  
end;
